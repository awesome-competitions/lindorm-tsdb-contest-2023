package com.alibaba.lindorm.contest.v2.codec;

import com.alibaba.lindorm.contest.util.Util;
import com.alibaba.lindorm.contest.v2.Context;
import net.magik6k.bitbuffer.BitBuffer;
import net.magik6k.bitbuffer.DirectBitBuffer;

import java.nio.ByteBuffer;

public class DeltaOfDeltaBDFCMPlusCodec extends Codec<double[]>{

    @Override
    public void encode(ByteBuffer src, double[] data, int size) {
        BitBuffer buffer = new DirectBitBuffer(src);
        buffer.putDouble(data[0]);
        if (data.length > 1){
            double preDiff = 0;
            double preDiffDiff = 0;
            int preLeadingZeros = -1;
            int preTrailingZeros = -1;
            int minLeadingZeros = 64;
            int maxLeadingZeros = 0;
            int minTrailingZeros = 64;
            int maxTrailingZeros = 0;
            for (int i = 1; i < size; i++) {
                double diff = data[i] - data[i - 1];
                double diffDiff = diff - preDiff;
                long v1 = Double.doubleToRawLongBits(diffDiff);
                long v2 = Double.doubleToRawLongBits(preDiffDiff);
                long xorValue = v1 ^ v2;
                int leadingZeros = Long.numberOfLeadingZeros(xorValue) / 4 * 4;
                int trailingZeros = Long.numberOfTrailingZeros(xorValue) / 4 * 4;
                if (i > 2 && xorValue != 0){
                    minLeadingZeros = Math.min(minLeadingZeros, leadingZeros);
                    maxLeadingZeros = Math.max(maxLeadingZeros, leadingZeros);
                    minTrailingZeros = Math.min(minTrailingZeros, trailingZeros);
                    maxTrailingZeros = Math.max(maxTrailingZeros, trailingZeros);
                }
                if (xorValue == 0){
                }else if (preTrailingZeros >= 0 && leadingZeros == preLeadingZeros && trailingZeros == preTrailingZeros) {
                }else {
                    preLeadingZeros = leadingZeros;
                    preTrailingZeros = trailingZeros;
                }
                preDiffDiff = diffDiff;
                preDiff = diff;
            }

            int leadingBits = Util.parseBits((maxLeadingZeros - minLeadingZeros)/4, true);
            int trailingBits = Util.parseBits((maxTrailingZeros - minTrailingZeros)/4, true);
            buffer.putInt(minLeadingZeros/4, 4);
            buffer.putInt(minTrailingZeros/4, 4);
            buffer.putInt(leadingBits, 4);
            buffer.putInt(trailingBits, 4);

            preDiff = 0;
            preDiffDiff = 0;
            preLeadingZeros = -1;
            preTrailingZeros = -1;
            for (int i = 1; i < size; i++) {
                double diff = data[i] - data[i - 1];
                double diffDiff = diff - preDiff;
                long v1 = Double.doubleToRawLongBits(diffDiff);
                long v2 = Double.doubleToRawLongBits(preDiffDiff);
                long xorValue = v1 ^ v2;
                int leadingZeros = Long.numberOfLeadingZeros(xorValue) / 4 * 4;
                int trailingZeros = Long.numberOfTrailingZeros(xorValue) / 4 * 4;
                if (xorValue == 0){
                    buffer.putBit(false);
                }else if (preTrailingZeros >= 0 && leadingZeros == preLeadingZeros && trailingZeros == preTrailingZeros) {
                    buffer.putBit(true);
                    buffer.putBit(true);
                    long v = xorValue >> preTrailingZeros;
                    buffer.putLong(v, 64 - preLeadingZeros - preTrailingZeros);
                }else {
                    buffer.putBit(true);
                    buffer.putBit(false);
                    if (i > 2){
                        buffer.putInt((leadingZeros - minLeadingZeros)/4, leadingBits);
                        buffer.putInt((trailingZeros - minTrailingZeros)/4, trailingBits);
                    }else{
                        buffer.putInt(leadingZeros/4, 4);
                        buffer.putInt(trailingZeros/4, 4);
                    }
                    long v = xorValue >> trailingZeros;
                    buffer.putLong(v, 64 - leadingZeros - trailingZeros);
                    preLeadingZeros = leadingZeros;
                    preTrailingZeros = trailingZeros;
                }
                preDiffDiff = diffDiff;
                preDiff = diff;
            }
        }
        buffer.flip();
    }

    @Override
    public void decode(ByteBuffer src, double[] data, int size) {
        BitBuffer buffer = new DirectBitBuffer(src);
        data[0] = buffer.getDouble();
        if (size > 1){
            double preDiff = 0;
            double preDiffDiff = 0;
            int preLeadingZeros = -1;
            int preTrailingZeros = -1;

            int minLeadingZeros = buffer.getIntUnsigned(4) * 4;
            int minTrailingZeros = buffer.getIntUnsigned(4) * 4;
            int leadingBits = buffer.getIntUnsigned(4);
            int trailingBits = buffer.getIntUnsigned(4);
            for (int i = 1; i < size; i++) {
                long xorValue = 0;
                if (buffer.getBoolean()){
                    if (!buffer.getBoolean()) {
                        if (i > 2){
                            preLeadingZeros = minLeadingZeros + buffer.getIntUnsigned(leadingBits) * 4;
                            preTrailingZeros = minTrailingZeros + buffer.getIntUnsigned(trailingBits) * 4;
                        }else{
                            preLeadingZeros = buffer.getIntUnsigned(4) * 4;
                            preTrailingZeros = buffer.getIntUnsigned(4) * 4;
                        }
                    }
                    long v = buffer.getLongUnsigned(64 - preLeadingZeros - preTrailingZeros);
                    xorValue = v << preTrailingZeros;
                }
                long v1 = Double.doubleToRawLongBits(preDiffDiff);
                double diffDiff = Double.longBitsToDouble(v1 ^ xorValue);
                double diff = preDiff + diffDiff;
                data[i] = data[i-1] + diff;
                preDiffDiff = diffDiff;
                preDiff = diff;
            }
        }
    }

    public static void main(String[] args) {
        DeltaOfDeltaBDFCMPlusCodec codec = new DeltaOfDeltaBDFCMPlusCodec();

        double[][] numbersList = new double[][]{
                {20155.050843980156,20155.05084502334,20155.050848152885,20155.050853368793,20155.05086067107,20155.050870059706,20155.05088153471,20155.050895096076,20155.050910743805,20155.0509284779,20155.050948298354,20155.050970205175,20155.05099419836,20155.051020277904,20155.051048443816,20155.051078696088,20155.05111103472,20155.051145459718,20155.051181971074,20155.051220568796,20155.051261252876,20155.051304023316,20155.05134888012,20155.051395823284,20155.051444852805,20155.051495968688,20155.05154917093,20155.051604459528,20155.05166183449,20155.051721295804,20155.05178284348,20155.05184647751,20155.051912197894,20155.05198000464,20155.05204989774,20155.05212187719,20155.052195943	,20155.05227209516,20155.052350333677,20155.052430658543,20155.052513069764,20155.052597567334,20155.05268415126,20155.052772821527,20155.052863578152,20155.05295642112,20155.05305135044,20155.053148366103,20155.053247468117,20155.053348656475,20155.053451931177,20155.053557292227,20155.05366473962,20155.05377427335,20155.053885893427,20155.05399959984,20155.0541153926,20155.054233271694,20155.054353237127,20155.0544752889,20155.054599427007,20155.05472565145,20155.05485396223,20155.05498435934,20155.055116842785,20155.05525141256,20155.055388068664,20155.055526811102,20155.055667639866,20155.055810554957,20155.055955556374,20155.056102644117,20155.056251818183,20155.056403078575,20155.056556425287,20155.05671185832,20155.05686937767,20155.05702898334,20155.05719067533,20155.05735445363,20155.05752031825,20155.05768826918,20155.057858306423,20155.058030429976,20155.05820463984,20155.05838093601,20155.058559318488,20155.058739787273,20155.05892234236,20155.059106983746,20155.059293711438,20155.05948252543,20155.05967342572,20155.059866412306,20155.060061485186,20155.06025864436,20155.06045788983,20155.060659221588,20155.060862639635,20155.061068143972,20155.061275734595,20155.0614854115,20155.06169717469,20155.06191102416,20155.062126959914,20155.062344981943,20155.062565090248,20155.06278728483,20155.063011565682,20155.06323793281,20155.063466386204,20155.063696925867,20155.063929551798,20155.06416426399,20155.064401062446,20155.064639947166,20155.06488091814,20155.065123975375,20155.065369118864,20155.065616348606,20155.0658656646,20155.066117066846,20155.066370555338,20155.066626130076,20155.066883791056,20155.06714353828,20155.067405371745,20155.067669291446,20155.067935297382,20155.068203389554,20155.068473567957,20155.068745832592,20155.06902018345,20155.06929662054,20155.06957514385,20155.069855753383,20155.070138449133,20155.0704232311,20155.070710099284,20155.07099905368,20155.07129009429,20155.071583221103,20155.071878434126,20155.072175733352,20155.072475118777,20155.072776590405,20155.073080148228,20155.073385792246,20155.07369352246,20155.07400333886,20155.074315241447,20155.07462923022,20155.07494530518,20155.07526346632,20155.075583713635,20155.075906047125,20155.07623046679,20155.076556972625,20155.07688556463,20155.0772162428,20155.077549007132,20155.077883857626,20155.07822079428,20155.078559817088,20155.078900926048,20155.07924412116,20155.07958940242,20155.079936769824,20155.08028622337,20155.080637763058,20155.08099138888,20155.08134710084,20155.08170489893,20155.08206478315,20155.082426753495,20155.082790809964,20155.083156952554,20155.083525181264,20155.08389549609,20155.084267897022,20155.08464238407,20155.085018957223,20155.08539761648,20155.085778361834,20155.086161193292,20155.08654611084,20155.086933114486,20155.087322204217,20155.087713380035,20155.088106641935,20155.088501989918,20155.08889942398,20155.089298944113,20155.089700550318,20155.09010424259,20155.090510020927,20155.09091788533,20155.091327835788,20155.091739872303,20155.092153994872},
                {250267.49735338532,250267.49839656736,250267.50152611354,250267.5067420238,250267.5140442982,250267.52343293652,250267.53490793874,250267.54846930486,250267.56411703472,250267.58185112814,250267.60167158511,250267.62357840536,250267.6475715888,250267.67365113524,250267.7018170444,250267.7320693162,250267.76440795028,250267.79883294652,250267.83534430456,250267.87394202413,250267.914626105,250267.9573965468,250268.00225334923,250268.0491965119,250268.09822603455,250268.14934191672,250268.20254415803,250268.25783275813,250268.3152077166,250268.37466903293,250268.43621670664,250268.4998507374,250268.56557112467,250268.63337786793,250268.7032709666,250268.77525042027,250268.8493162283,250268.92546839017,250269.00370690535,250269.08403177315,250269.16644299292,250269.2509405642,250269.33752448618,250269.42619475833,250269.5169513799,250269.60979435022,250269.70472366858,250269.80173933425,250269.90084134648,250270.00202970457,250270.10530440765,250270.2106654551,250270.31811284594,250270.4276465794,250270.53926665476,250270.65297307097,250270.76876582735,250270.88664492295,250271.00661035685,250271.12866212818,250271.25280023593,250271.3790246792,250271.50733545708,250271.63773256855,250271.77021601255,250271.9047857882,250272.04144189443,250272.1801843301,250272.32101309433,250272.46392818587,250272.60892960377,250272.75601734687,250272.905191414,250273.05645180412,250273.209798516,250273.3652315485,250273.52275090048,250273.68235657067,250273.84404855792,250274.00782686094,250274.1736914785,250274.34164240933,250274.5116796522,250274.68380320573,250274.85801306868,250275.03430923977,250275.2126917175 ,250275.39316050068,250275.57571558777,250275.76035697752,250275.94708466844,250276.13589865918,250276.32679894823,250276.51978553418,250276.71485841554,250276.91201759083,250277.11126305856,250277.31259481714,250277.51601286518,250277.72151720105,250277.92910782312,250278.13878472993,250278.3505479198,250278.56439739116,250278.78033314238,250278.99835517176,250279.21846347774,250279.44065805856,250279.6649389125,250279.89130603796,250280.11975943315,250280.35029909632,250280.58292502578,250280.81763721968,250281.0544356763,250281.29332039377,250281.5342913703,250281.7773486041,250282.02249209327,250282.2697218359,250282.51903783024,250282.77044007427,250283.02392856608,250283.2795033038,250283.53716428543,250283.79691150913,250284.05874497275,250284.32266467437,250284.58867061202,250284.8567627836,250285.1269411872,250285.39920582058,250285.67355668178,250285.9499937687,250286.22851707914,250286.50912661117,250286.79182236252,250287.07660433103,250287.36347251455,250287.65242691094,250287.94346751797,250288.23659433343,250288.53180735506,250288.82910658064,250289.12849200785,250289.42996363452,250289.73352145823,250290.03916547674,250290.34689568775,250290.65671208885,250290.96861467778,250291.28260345198,250291.59867840924,250291.91683954705,250292.23708686308,250292.55942035478,250292.88384001976,250293.21034585556,250293.53893785964,250293.86961602955,250294.20238036267,250294.53723085666,250294.8741675088,250295.21319031657,250295.55429927743,250295.89749438874,250296.2427756479,250296.59014305228,250296.9395965992,250297.2911362861,250297.64476211014,250298.0004740688,250298.35827215924,250298.71815637883,250299.0801267248,250299.4441831943,250299.81032578473,250300.17855449318,250300.54886931682,250300.9212702529,250301.29575729865,250301.67233045108,250302.05098970735,250302.43173506466,250302.81456652004,250303.1994840706,250303.5864877134,250303.9755774454,250304.36675326386,250304.7600151656,250305.15536314767,250305.55279720714,250305.95231734094,250306.35392354598,250306.75761581922,250307.16339415766,250307.57125855808,250307.9812090175,250308.39324553276,250308.80736810068},
                {-2226420.3326550564,-2226420.343086877,-2226420.3743823385,-2226420.4265414416,-2226420.499564185,-2226420.593450568,-2226420.7082005907,-2226420.843814252,-2226421.00029155,-2226421.1776324846,-2226421.375837054,-2226421.594905257,-2226421.834837091,-2226422.0956325554,-2226422.3772916473,-2226422.679814365,-2226423.003200706,-2226423.3474506685,-2226423.7125642486,-2226424.0985414446,-2226424.5053822533,-2226424.933086671,-2226425.381654695,-2226425.851086322,-2226426.3413815484,-2226426.8525403705,-2226427.384562784,-2226427.9374487847,-2226428.511198369,-2226429.105811532,-2226429.72128827,-2226430.3576285774,-2226431.01483245,-2226431.6928998823,-2226432.3918308695,-2226433.111625406,-2226433.852283486,-2226434.613805105,-2226435.396190257,-2226436.1994389347,-2226437.0235511325,-2226437.8685268452,-2226438.7343660654,-2226439.6210687864,-2226440.528635002,-2226441.4570647054,-2226442.406357889,-2226443.3765145456,-2226444.367534668,-2226445.379418249,-2226446.41216528,-2226447.465775754,-2226448.5402496625,-2226449.6355869975,-2226450.7517877505,-2226451.888851913,-2226453.046779477,-2226454.225570433,-2226455.4252247717,-2226456.645742485,-2226457.8871235624,-2226459.149367995,-2226460.432475774,-2226461.7364468887,-2226463.0612813286,-2226464.4069790854,-2226465.773540147,-2226467.1609645043,-2226468.5692521464,-2226469.998403062,-2226471.4484172408,-2226472.9192946716,-2226474.411035343,-2226475.9236392444,-2226477.457106363,-2226479.0114366882,-2226480.586630208,-2226482.18268691,-2226483.7996067824,-2226485.4373898124,-2226487.096035988,-2226488.7755452967,-2226490.475917725,-2226492.197153261,-2226493.9392518904,-2226495.7022136007,-2226497.4860383784,-2226499.2907262095,-2226501.116277081,-2226502.9626909783,-2226504.829967888,-2226506.718107795,-2226508.6271106857,-2226510.556976545,-2226512.5077053583,-2226514.4792971113,-2226516.4717517886,-2226518.485069375,-2226520.519249855,-2226522.5742932134,-2226524.6501994347,-2226526.7469685026,-2226528.8646004014,-2226531.0030951146,-2226533.162452627,-2226535.342672921,-2226537.54375598,-2226539.7657017885,-2226542.0085103284,-2226544.2721815826,-2226546.5567155345,-2226548.862112167,-2226551.188371461,-2226553.5354934004,-2226555.903477966,-2226558.292325141,-2226560.7020349065,-2226563.1326072444,-2226565.5840421356,-2226568.0563395624,-2226570.549499505,-2226573.0635219454,-2226575.598406864,-2226578.154154241,-2226580.730764058,-2226583.3282362944,-2226585.9465709305,-2226588.585767947,-2226591.2458273233,-2226593.9267490394,-2226596.628533075,-2226599.351179409,-2226602.0946880206,-2226604.85905889,-2226607.644291995,-2226610.450387315,-2226613.277344828,-2226616.1251645135,-2226618.993846349,-2226621.8833903125,-2226624.793796383,-2226627.7250645375,-2226630.6771947537,-2226633.6501870095,-2226636.644041282,-2226639.6587575483,-2226642.6943357857,-2226645.750775971,-2226648.828078081,-2226651.9262420917,-2226655.045267981,-2226658.1851557232,-2226661.3459052956,-2226664.527516674,-2226667.7299898337,-2226670.953324751,-2226674.1975214006,-2226677.4625797584,-2226680.7484997995,-2226684.0552814985,-2226687.38292483,-2226690.7314297697,-2226694.100796291,-2226697.491024369,-2226700.9021139774,-2226704.334065091,-2226707.786877682,-2226711.2605517255,-2226714.755087195,-2226718.270484064,-2226721.8067423045,-2226725.3638618914,-2226728.941842796,-2226732.5406849915,-2226736.160388451,-2226739.8009531465,-2226743.46237905,-2226747.144666135,-2226750.8478143713,-2226754.5718237325,-2226758.3166941893,-2226762.0824257135,-2226765.8690182767,-2226769.67647185,-2226773.5047864034,-2226777.3539619087,-2226781.2239983366,-2226785.114895657,-2226789.0266538416,-2226792.959272859,-2226796.91275268,-2226800.887093275,-2226804.8822946125,-2226808.898356663,-2226812.9352793954,-2226816.99306278,-2226821.0717067844,-2226825.171211378,-2226829.291576531,-2226833.43280221},
                {-17631.69256962994,-17631.692673948146,-17631.692986902763,-17631.69350849379,-17631.694238721226,-17631.69517758506,-17631.696325085286,-17631.697681221896,-17631.699245994878,-17631.701019404223,-17631.703001449918,-17631.705192131947,-17631.70759145029,-17631.71019940493,-17631.71301599585,-17631.71604122303,-17631.719275086438,-17631.72271758606,-17631.726368721866,-17631.730228493823,-17631.73429690191,-17631.738573946088,-17631.74305962633,-17631.7477539426,-17631.75265689486,-17631.75776848308,-17631.763088707216,-17631.76861756722,-17631.774355063066,-17631.7803011947,-17631.786455962076,-17631.79281936515,-17631.799391403874,-17631.806172078203,-17631.81316138807,-17631.820359333436,-17631.82776591424,-17631.835381130426,-17631.843204981942,-17631.85123746872,-17631.859478590704,-17631.867928347827,-17631.87658674003,-17631.88545376724,-17631.8945294294,-17631.903813726432,-17631.913306658265,-17631.923008224832,-17631.932918426057,-17631.943037261863,-17631.953364732177,-17631.963900836916,-17631.974645576003,-17631.98559894935,-17631.99676095688,-17632.008131598508,-17632.019710874145,-17632.031498783705,-17632.043495327092,-17632.055700504225,-17632.068114315,-17632.08073675933,-17632.093567837117,-17632.106607548263,-17632.119855892666,-17632.133312870228,-17632.14697848085,-17632.16085272442,-17632.17493560084,-17632.189227109997,-17632.203727251785,-17632.218436026094,-17632.23335343281,-17632.24847947182,-17632.263814143007,-17632.27935744626,-17632.295109381455,-17632.31106994848,-17632.3272391472,-17632.3436169775,-17632.360203439257,-17632.37699853234,-17632.394002256628,-17632.411214611984,-17632.428635598277,-17632.446265215385,-17632.46410346316,-17632.482150341475,-17632.500405850187,-17632.51886998916,-17632.537542758255,-17632.556424157327,-17632.575514186232,-17632.594812844825,-17632.61432013296,-17632.63403605049,-17632.653960597265,-17632.674093773127,-17632.694435577927,-17632.714986011513,-17632.73574507372,-17632.756712764403,-17632.77788908339,-17632.799274030524,-17632.820867605646,-17632.842669808586,-17632.86468063918,-17632.886900097263,-17632.90932818266,-17632.931964895204,-17632.954810234725,-17632.977864201042,-17633.001126793988,-17633.02459801338,-17633.048277859038,-17633.072166330785,-17633.09626342844,-17633.12056915182,-17633.14508350073,-17633.169806474998,-17633.194738074428,-17633.21987829883,-17633.245227148018,-17633.27078462179,-17633.296550719955,-17633.32252544232,-17633.348708788682,-17633.375100758847,-17633.40170135261,-17633.42851056977,-17633.455528410126,-17633.48275487347,-17633.510189959587,-17633.537833668277,-17633.565685999325,-17633.593746952527,-17633.622016527657,-17633.650494724512,-17633.679181542866,-17633.708076982504,-17633.73718104321,-17633.76649372475,-17633.796015026914,-17633.82574494947,-17633.855683492195,-17633.88583065486,-17633.916186437233,-17633.946750839084,-17633.977523860183,-17634.008505500296,-17634.039695759184,-17634.07109463661,-17634.102702132335,-17634.134518246115,-17634.166542977713,-17634.198776326884,-17634.231218293386,-17634.263868876962,-17634.29672807737,-17634.329795894362,-17634.363072327676,-17634.396557377073,-17634.43025104229,-17634.464153323064,-17634.49826421915,-17634.532583730284,-17634.5671118562,-17634.601848596634,-17634.63679395133,-17634.671947920015,-17634.707310502425,-17634.74288169829,-17634.778661507335,-17634.814649929293,-17634.850846963887,-17634.887252610843,-17634.923866869878,-17634.960689740725,-17634.99772122309,-17635.0349613167,-17635.072410021272,-17635.110067336514,-17635.147933262146,-17635.186007797874,-17635.22429094341,-17635.262782698464,-17635.301483062744,-17635.34039203595,-17635.379509617793,-17635.418835807966,-17635.45837060618,-17635.498114012124,-17635.538066025503,-17635.578226646005,-17635.61859587333,-17635.659173707172,-17635.69996014722,-17635.74095519316,-17635.782158844682,-17635.823571101475},
                {22614278.78541237,22614278.889730576,22614279.202685196,22614279.724276222,22614280.45450366,22614281.39336749,22614282.540867716,22614283.897004325,22614285.46177731,22614287.235186655,22614289.21723235,22614291.407914378,22614293.80723272,22614296.41518736,22614299.231778283,22614302.25700546,22614305.49086887,22614308.933368493,22614312.584504295,22614316.444276255,22614320.512684338,22614324.78972852,22614329.27540876,22614333.96972503,22614338.872677293,22614343.98426551,22614349.304489646,22614354.833349653,22614360.570845496,22614366.516977128,22614372.671744507,22614379.03514758,22614385.607186306,22614392.387860633,22614399.3771705,22614406.575115867,22614413.98169667,22614421.596912857,22614429.42076437,22614437.453251153,22614445.694373135,22614454.14413026,22614462.802522458,22614471.66954967,22614480.74521183,22614490.029508863,22614499.522440694,22614509.224007264,22614519.13420849,22614529.253044292,22614539.580514606,22614550.11661935,22614560.861358434,22614571.81473178,22614582.976739313,22614594.34738094,22614605.926656578,22614617.714566134,22614629.711109526,22614641.916286655,22614654.330097433,22614666.95254176,22614679.78361955,22614692.823330693,22614706.071675096,22614719.52865266,22614733.19426328,22614747.06850685,22614761.15138327,22614775.442892425,22614789.943034213,22614804.651808526,22614819.569215238,22614834.69525425,22614850.02992544,22614865.57322869,22614881.325163886,22614897.28573091,22614913.45492963,22614929.83275993,22614946.419221688,22614963.214314774,22614980.21803906,22614997.430394415,22615014.85138071,22615032.480997816,22615050.319245588,22615068.366123904,22615086.621632617,22615105.08577159,22615123.758540686,22615142.63993976,22615161.729968663,22615181.028627258,22615200.535915393,22615220.25183292,22615240.176379696,22615260.309555557,22615280.651360355,22615301.201793943,22615321.96085615,22615342.928546835,22615364.104865823,22615385.489812955,22615407.08338808,22615428.885591015,22615450.89642161,22615473.115879692,22615495.54396509,22615518.180677634,22615541.026017155,22615564.079983473,22615587.342576418,22615610.81379581,22615634.49364147,22615658.38211322,22615682.479210872,22615706.78493425,22615731.29928316,22615756.022257432,22615780.95385686,22615806.094081264,22615831.44293045,22615857.00040422,22615882.766502384,22615908.74122475,22615934.92457111,22615961.316541277,22615987.91713504,22616014.7263522,22616041.744192556,22616068.9706559,22616096.405742016,22616124.049450707,22616151.901781756,22616179.962734956,22616208.23231009,22616236.710506942,22616265.397325296,22616294.292764936,22616323.396825638,22616352.709507182,22616382.230809346,22616411.9607319,22616441.899274625,22616472.04643729,22616502.402219664,22616532.966621518,22616563.739642616,22616594.721282728,22616625.911541615,22616657.310419038,22616688.917914767,22616720.734028544,22616752.758760147,22616784.992109314,22616817.434075814,22616850.084659394,22616882.9438598,22616916.011676792,22616949.288110107,22616982.773159504,22617016.466824718,22617050.369105496,22617084.48000158,22617118.799512714,22617153.32763863,22617188.064379066,22617223.00973376,22617258.163702447,22617293.526284855,22617329.097480718,22617364.877289765,22617400.865711723,22617437.062746316,22617473.468393274,22617510.082652308,22617546.905523155,22617583.93700552,22617621.17709913,22617658.6258037,22617696.283118945,22617734.149044577,22617772.223580305,22617810.50672584,22617848.998480897,22617887.698845174,22617926.60781838,22617965.725400224,22618005.051590398,22618044.586388607,22618084.329794552,22618124.281807933,22618164.442428436,22618204.811655764,22618245.389489602,22618286.17592965,22618327.17097559,22618368.374627113,22618409.786883906},
        };

        for (double[] numbers: numbersList){
            ByteBuffer encodedBuffer = ByteBuffer.allocate(3000);
            codec.encode(encodedBuffer, numbers, numbers.length);

            encodedBuffer.flip();
            System.out.println(encodedBuffer.remaining());

            int size = numbers.length;
            System.out.println(size * 8);
            System.out.println("==============================");
            codec.decode(encodedBuffer, Context.getBlockDoubleValues(), size);

            for (int i = 0; i < size; i++) {
                if (Context.getBlockDoubleValues()[i] != numbers[i]){
                    throw new RuntimeException("error");
                }
            }
        }


    }
}
