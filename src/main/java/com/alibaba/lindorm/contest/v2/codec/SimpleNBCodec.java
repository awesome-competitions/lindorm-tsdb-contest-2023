package com.alibaba.lindorm.contest.v2.codec;

import com.alibaba.lindorm.contest.util.Util;
import com.alibaba.lindorm.contest.v2.Context;
import net.magik6k.bitbuffer.ArrayBitBuffer;
import net.magik6k.bitbuffer.BitBuffer;
import net.magik6k.bitbuffer.DirectBitBuffer;

import java.nio.ByteBuffer;
import java.util.Arrays;

public class SimpleNBCodec extends Codec<int[]>{

    private static final int MAX_REDUCE = 15;

    private int calculateReduce(int[] data, int size, int minValue){
        int reduceBits = 0;
        boolean breakUp = false;
        while (! breakUp && reduceBits < MAX_REDUCE){
            for (int i = 0; i < size; i++) {
                int diff = data[i] - minValue;
                if (diff == 0){
                    continue;
                }
                int v = diff >> (reduceBits + 1);
                if ((v & 1) == 1) {
                    breakUp = true;
                    break;
                }
            }
            reduceBits++;
        }
        return reduceBits;
    }

    @Override
    public void encode(ByteBuffer src, int[] data, int size) {
        int minValue = Integer.MAX_VALUE;
        int maxValue = Integer.MIN_VALUE;
        for (int i = 0; i < size; i++) {
            if (data[i] < minValue){
                minValue = data[i];
            }
            if (data[i] > maxValue){
                maxValue = data[i];
            }
        }
        int reduce = calculateReduce(data, size, minValue);
        int maxBits = Util.parseBits(maxValue - minValue, true);
        maxBits -= reduce;

        BitBuffer buffer = new DirectBitBuffer(src);
        encodeVarInt(buffer, minValue);
        buffer.put(reduce, 4);
        buffer.put(maxBits, 5);
        for (int value : data) {
            buffer.putInt((value - minValue) >> reduce, maxBits);
        }
        buffer.flip();
    }

    @Override
    public void decode(ByteBuffer src, int[] data, int size) {
        BitBuffer buffer = new DirectBitBuffer(src);
        int min = decodeVarInt(buffer);
        int reduce = buffer.getIntUnsigned(4);
        int bits = buffer.getIntUnsigned(5);
        for (int i = 0; i < size; i++) {
            data[i] = (buffer.getIntUnsigned(bits) << reduce) + min;
        }
    }

    public static void main(String[] args) {
        SimpleNBCodec varintCodec = new SimpleNBCodec();

        int[][] numbersList = new int[][]{
                {-14754,-16530,-16338,-17362,-10002,-11186,-15346,-11826,-10242,-12594,-12306,-12994,-17730,-10114,-9138,-9554,-10082,-17298,-13602,-16738,-11538,-13090,-12690,-16658,-17762,-9346,-13778,-9026,-9602,-10114,-14658,-9554,-13730,-11234,-11058,-16546,-8994,-9410,-8866,-11346,-14418,-9426,-13954,-12514,-16018,-17730,-17426,-15298,-12018,-15490,-11314,-14930,-17378,-18050,-11778,-11458,-15106,-13714,-16514,-17106,-16562,-9426,-16098,-12818,-17042,-16946,-12578,-12594,-10514,-14338,-14418,-9842,-13490,-17666,-8498,-11058,-12306,-12194,-13714,-9234,-14658,-14898,-12658,-9250,-15202,-10034,-15298,-14370,-10370,-12146,-11778,-15538,-9378,-14786,-10786,-8178,-11730,-14082,-13154,-10818},
                {-16369,-24497,-17953,-18977,-17969,-22801,-16961,-23441,-21857,-20561,-23921,-24609,-19345,-21729,-20753,-21169,-21697,-18913,-15217,-18353,-23153,-14705,-24305,-18273,-19377,-20961,-15393,-16993,-21217,-21729,-22625,-21169,-21697,-22849,-22673,-18161,-20609,-17377,-20481,-22961,-16033,-21041,-15569,-20481,-17633,-19345,-19041,-16913,-19985,-17105,-22929,-16545,-18993,-19665,-23393,-19425,-16721,-15329,-18129,-18721,-24529,-17393,-17713,-20785,-18657,-18561,-24193,-24209,-22129,-15953,-16033,-21457,-15105,-15633,-16465,-22673,-20273,-23809,-15329,-17201,-16273,-22865,-24273,-20865,-16817,-21649,-16913,-15985,-21985,-20113,-23393,-23505,-20993,-16401,-22401,-19793,-23345,-22049,-14769,-22433},
                {-13034,-16162,-14618,-15642,-14634,-14466,-13626,-15106,-13522,-17226,-16938,-16274,-16010,-14746,-17418,-14186,-13362,-15578,-13234,-15018,-14818,-17722,-15970,-16290,-16042,-17626,-13410,-13658,-17882,-13394,-14290,-17834,-13362,-15866,-15690,-14826,-13626,-14042,-17146,-15978,-17698,-17706,-17234,-17146,-14298,-16010,-15706,-13578,-16650,-13770,-14594,-13210,-15658,-16330,-16410,-16090,-13386,-16994,-14794,-15386,-16194,-14058,-15730,-17450,-16674,-15226,-15858,-15874,-13794,-17618,-17698,-13122,-16770,-17298,-13130,-15690,-16938,-15474,-13346,-13866,-14290,-14530,-15938,-17530,-13482,-14666,-13578,-17650,-13650,-16778,-15058,-15170,-17658,-14418,-14066,-17810,-15010,-13714,-17786,-14098},
                {-7109,-7237,-6693,-5717,-6709,-7541,-5701,-6181,-6597,-7301,-6661,-7349,-6085,-6469,-7493,-5909,-6437,-7653,-5957,-7093,-5893,-5797,-7045,-7013,-6117,-5701,-6133,-5733,-5957,-6469,-7365,-5909,-6437,-7589,-5765,-6901,-7349,-6117,-7221,-5701,-6773,-5781,-6309,-7221,-6373,-6085,-5781,-7653,-6725,-5845,-5669,-7285,-5733,-6405,-6133,-6165,-7461,-6069,-6869,-7461,-7269,-6133,-6453,-7525,-7397,-7301,-6933,-6949,-6869,-6693,-6773,-6197,-5845,-6373,-7205,-7413,-7013,-6549,-6421,-5941,-7013,-7605,-7013,-7605,-7557,-6389,-7653,-6725,-6725,-6853,-6133,-6245,-5733,-7141,-7141,-6533,-6085,-6789,-7509,-7173},
                {18863,19087,20279,18607,18615,18431,19271,19791,20375,20023,19311,19623,20887,19503,19479,18063,19535,18319,18015,19879,18079,19527,18927,18959,19855,20271,19839,18591,20015,18503,18959,20063,18887,19383,20559,20071,20623,20207,18751,20271,20199,20191,18663,19103,19599,19887,18191,18319,18599,18127,20303,19687,20239,20567,20839,19159,20511,20903,19103,20511,19055,20191,20519,19799,20575,18671,20039,19023,20103,19631,20199,18775,20127,18951,18119,18559,20311,19423,18903,19383,18959,18719,19959,19367,18415,18583,18319,20247,19247,19471,20839,19079,18239,20831,19831,20439,19887,19535,20463,19799},
                {-12795,-20923,-14379,-15403,-14395,-19227,-13387,-19867,-18283,-16987,-16699,-21035,-22123,-14507,-13531,-13947,-18123,-21691,-17995,-21131,-15931,-17483,-17083,-21051,-15803,-13739,-18171,-13419,-17643,-18155,-19051,-17595,-18123,-15627,-15451,-20939,-13387,-13803,-16907,-15739,-18811,-17467,-21995,-16907,-14059,-22123,-15467,-13339,-16411,-13531,-15707,-12971,-15419,-22443,-16171,-15851,-19499,-21755,-20907,-15147,-20955,-13819,-20491,-17211,-21435,-14987,-16971,-20635,-14907,-22379,-22459,-14235,-21531,-22059,-12891,-15451,-16699,-20235,-18107,-13627,-19051,-19291,-20699,-17291,-19595,-14427,-13339,-18763,-18411,-16539,-19819,-19931,-13771,-19179,-18827,-22571,-19771,-18475,-17547,-15211},
                {1051626,1159850,840042,559018,466378,145194,41034,1484554,996138,983786,1304074,773386,588650,536266,107242,306826,1316298,979082,1032778,749642,864842,1433290,883690,1219722,608618,1077034,662602,577354,296778,1276266,331722,1046826,1072650,875146,585322,629834,417386,1376970,1117514,1485034,1361962,806954,412426,1093866,260362,308650,1278954,1111082,988010,630890,825066,401450,189002,648330,774602,874922,531274,1482666,49866,999274,79818,1286954,630282,803562,339338,379434,1373802,943786,1205866,932042,1061962,646538,302890,748714,327882,265322,144074,734186,1162666,250794,871722,661482,1103722,197130,1471178,166346,211082,1452010,1436010,44234,954602,1060842,637002,711594,155594,228202,1364650,1352298,93226,935562},
                {7309256	,917480		,8597672	,2816648	,7707656	,6902824	,1298664	,5242184	,2253768	,1225064	,6561704	,5531016	,5846280	,2793896	,6864872	,4064456	,8073928	,9236712	,9290408	,507272		,622472		,5690920	,7641320	,6977352	,8866248	,4834664	,2920232	,1818632	,4054408	,9033896	,5073000	,304456		,6830280	,9132776	,6342952	,387464		,7675016	,5634600	,6375144	,9742664	,619592		,4564584	,9670056	,5835144	,1017992	,3066280	,2036584	,2368712	,3245640	,7388520	,6582696	,8659080	,5946632	,7905960	,2032232	,2132552	,3288904	,5240296	,4307496	,6256904	,5837448	,3528232	,4887912	,7061192	,6096968	,2137064	,7131432	,1201416	,8463496	,9189672	,2319592	,404168		,1560520	,6506344	,4069160	,7522952	,7901704	,491816		,8920296	,1508424	,129352		,1419112	,6861352	,2954760	,1228808	,423976		,6468712	,3709640	,7693640	,8785512	,8712232	,2318472	,394632		,7469224	,1413224	,8485832	,2622280	,1593576	,6850856	,5693192	},
                {5114501,206373	,402917	,4621893,5512901,2708069,1103909,1047429,2059013,3030309,1850597,3336261,1651525,4082789,2670117,5353349,3879173,5041957,4579301,312517	,5911365,4979813,3446565,266245	,4671493,639909	,4209125,5623877,5859653,839141	,878245	,2109701,119173	,4421669,5631845,192709	,963909	,4923493,2180389,5031557,2424837,369829	,1475301,1640389,2823237,2871525,3841829,2173957,5050885,3193765,387941	,4464325,5751877,1711205,1321125,1421445,3094149,1045541,4112741,2062149,5126341,3333477,4176805,4350085,5385861,5942309,936677	,5006661,2268741,4994917,2124837,209413	,1365765,5795237,3874405,811845	,5190597,297061	,209189	,1313669,1418245,2708005,666597	,2760005,1034053,3712869,4273957,5514885,5498885,590757	,517477	,1607365,199877	,2758117,1218469,3774725,2427525,3398821,2139749,3498437},
                {2211405,43303277,43499821,47718797,32609805,1804973,16200813,40144333,7155917,16127213,41463853,433165	,30748429,17696045,21767021,8966605,12976077,14138861,14192557,5409421,5524621,20593069,42543469,11879501,33768397,19736813,17822381,16720781,48956557,33936045,39975149,25206605,29216077,24034925,41245101,15289613,32577165,28020397,31277293,4644813,15521741,19466733,4572205,10737293,45920141,27968429,36938733,17270861,28147789,42290669,11484845,33561229,848781	,2808109,36934381,34518349,28191053,142445,19209645,41159053,20739597,48430381,9790061,39446989,999117	,7039213,42033581,46103565,33365645,4091821,7221741,5306317,46462669,38892141,18971309,32425101,10287501,45393965,3822445,36410573,45031501,43804909,41763501,27856909,26130957,45326125,31370861,48611789,22595789,13687661,13614381,7220621,45296781,32371373,36315373,23387981,27524429,36495725,11753005,20595341}
        };

        int expressedTotal = 0, originalTotal = 0;
        for (int[] numbers: numbersList){
            ByteBuffer encodedBuffer = ByteBuffer.allocate(3000);
            varintCodec.encode(encodedBuffer, numbers, numbers.length);

            System.out.println("=====================");
            encodedBuffer.flip();
            System.out.println(encodedBuffer.remaining() + "/" + numbers.length * 4 + "=" + (float)encodedBuffer.remaining()/(numbers.length * 4));

            expressedTotal += encodedBuffer.remaining();
            originalTotal += numbers.length * 4;

            int size = numbers.length;
            varintCodec.decode(encodedBuffer, Context.getBlockIntValues(), size);

            for (int i = 0; i < size; i++) {
                if (numbers[i] != Context.getBlockIntValues()[i]){
                    throw new RuntimeException("error");
                }
            }
            System.out.println(Arrays.toString(Context.getBlockIntValues()));
        }
        System.out.println(expressedTotal + "/" + originalTotal + "=" + (float)expressedTotal/originalTotal);
    }
}
