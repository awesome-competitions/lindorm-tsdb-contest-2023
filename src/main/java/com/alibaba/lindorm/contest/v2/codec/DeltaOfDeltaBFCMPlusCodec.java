package com.alibaba.lindorm.contest.v2.codec;

import com.alibaba.lindorm.contest.util.Util;
import com.alibaba.lindorm.contest.v2.Context;
import net.magik6k.bitbuffer.BitBuffer;
import net.magik6k.bitbuffer.DirectBitBuffer;

import java.nio.ByteBuffer;
import java.sql.SQLOutput;
import java.util.Arrays;

public class DeltaOfDeltaBFCMPlusCodec extends Codec<double[]>{

    private int[] valueBits = new int[64];

    public int[] getValueBits() {
        return valueBits;
    }

    @Override
    public void encode(ByteBuffer src, double[] data, int size) {
        BitBuffer buffer = new DirectBitBuffer(src);
        buffer.putDouble(data[0]);
        if (data.length > 1){
            double preDiff = 0;
            double preDiffDiff = 0;
            int preLeadingZeros = -1;
            int preTrailingZeros = -1;
            for (int i = 1; i < size; i++) {
                double diff = data[i] - data[i - 1];
                double diffDiff = diff - preDiff;
                long v1 = Double.doubleToRawLongBits(diffDiff);
                long v2 = Double.doubleToRawLongBits(preDiffDiff);
                long xorValue = v1 ^ v2;
                int leadingZeros = Long.numberOfLeadingZeros(xorValue) / 4 * 4;
                int trailingZeros = Long.numberOfTrailingZeros(xorValue) / 4 * 4;

                if (i > 2){
                    if (xorValue == 0){
                        valueBits[0] ++;
                    }else{
                        valueBits[(64 - leadingZeros - trailingZeros)/4] ++;
                    }
                }

                if (xorValue == 0){
                    buffer.putBit(false);
                }else if (preTrailingZeros >= 0 && leadingZeros == preLeadingZeros && trailingZeros == preTrailingZeros) {
                    buffer.putBit(true);
                    buffer.putBit(true);
                    long v = xorValue >> preTrailingZeros;
                    buffer.putLong(v, 64 - preLeadingZeros - preTrailingZeros);
                }else {
                    buffer.putBit(true);
                    buffer.putBit(false);
                    buffer.putInt(leadingZeros/4, 4);
                    buffer.putInt(trailingZeros/4, 4);
                    long v = xorValue >> trailingZeros;
                    buffer.putLong(v, 64 - leadingZeros - trailingZeros);
                    preLeadingZeros = leadingZeros;
                    preTrailingZeros = trailingZeros;
                }
                preDiffDiff = diffDiff;
                preDiff = diff;
            }
        }
        buffer.flip();
    }

    @Override
    public void decode(ByteBuffer src, double[] data, int size) {
        BitBuffer buffer = new DirectBitBuffer(src);
        data[0] = buffer.getDouble();
        if (size > 1){
            double preDiff = 0;
            double preDiffDiff = 0;
            int preLeadingZeros = -1;
            int preTrailingZeros = -1;
            for (int i = 1; i < size; i++) {
                long xorValue = 0;
                if (buffer.getBoolean()){
                    if (!buffer.getBoolean()) {
                        preLeadingZeros = buffer.getIntUnsigned(4) * 4;
                        preTrailingZeros = buffer.getIntUnsigned(4) * 4;
                    }
                    long v = buffer.getLongUnsigned(64 - preLeadingZeros - preTrailingZeros);
                    xorValue = v << preTrailingZeros;
                }
                long v1 = Double.doubleToRawLongBits(preDiffDiff);
                double diffDiff = Double.longBitsToDouble(v1 ^ xorValue);
                double diff = preDiff + diffDiff;
                data[i] = data[i-1] + diff;
                preDiffDiff = diffDiff;
                preDiff = diff;
            }
        }
    }

    public static void main(String[] args) {
        DeltaOfDeltaBFCMPlusCodec varintCodec = new DeltaOfDeltaBFCMPlusCodec();
//        double[] numbers = {20155.051924321,20155.051990041367,20155.05205784809,20155.052127741168,20155.0521997206,20155.05227378639,20155.05234993853,20155.052428177023,20155.052508501867,20155.052590913063,20155.05267541061,20155.05276199451,20155.052850664757,20155.052941421352,20155.053034264296,20155.053129193588,20155.053226209224,20155.053325311208,20155.05342649954,20155.053529774214,20155.05363513523,20155.05374258259,20155.053852116293,20155.053963736336,20155.05407744272,20155.054193235443,20155.054311114505,20155.054431079905,20155.054553131642,20155.054677269716,20155.054803494124,20155.054931804865,20155.055062201936,20155.055194685345,20155.055329255083,20155.055465911148,20155.055604653546,20155.05574548227,20155.05588839732,20155.056033398698,20155.056180486397,20155.056329660423,20155.05648092077,20155.05663426744,20155.056789700426,20155.056947219735,20155.05710682536,20155.0572685173,20155.057432295558,20155.05759816013,20155.05776611101,20155.057936148205,20155.05810827171,20155.058282481525,20155.058458777643,20155.058637160073,20155.058817628804,20155.05900018384,20155.059184825175,20155.059371552812,20155.05956036675,20155.059751266985,20155.059944253517,20155.060139326342,20155.06033648546,20155.060535730874,20155.060737062573,20155.060940480565,20155.06114598484};
        double[] numbers = {250267.49735338532,250267.49839656736,250267.50152611354,250267.5067420238,250267.5140442982,250267.52343293652,250267.53490793874,250267.54846930486,250267.56411703472,250267.58185112814,250267.60167158511,250267.62357840536,250267.6475715888,250267.67365113524,250267.7018170444,250267.7320693162,250267.76440795028,250267.79883294652,250267.83534430456,250267.87394202413,250267.914626105,250267.9573965468,250268.00225334923,250268.0491965119,250268.09822603455,250268.14934191672,250268.20254415803,250268.25783275813,250268.3152077166,250268.37466903293,250268.43621670664,250268.4998507374,250268.56557112467,250268.63337786793,250268.7032709666,250268.77525042027,250268.8493162283,250268.92546839017,250269.00370690535,250269.08403177315,250269.16644299292,250269.2509405642,250269.33752448618,250269.42619475833,250269.5169513799,250269.60979435022,250269.70472366858,250269.80173933425,250269.90084134648,250270.00202970457,250270.10530440765,250270.2106654551,250270.31811284594,250270.4276465794,250270.53926665476,250270.65297307097,250270.76876582735,250270.88664492295,250271.00661035685,250271.12866212818,250271.25280023593,250271.3790246792,250271.50733545708,250271.63773256855,250271.77021601255,250271.9047857882,250272.04144189443,250272.1801843301,250272.32101309433,250272.46392818587,250272.60892960377,250272.75601734687,250272.905191414,250273.05645180412,250273.209798516,250273.3652315485,250273.52275090048,250273.68235657067,250273.84404855792,250274.00782686094,250274.1736914785,250274.34164240933,250274.5116796522,250274.68380320573,250274.85801306868,250275.03430923977,250275.2126917175 ,250275.39316050068,250275.57571558777,250275.76035697752,250275.94708466844,250276.13589865918,250276.32679894823,250276.51978553418,250276.71485841554,250276.91201759083,250277.11126305856,250277.31259481714,250277.51601286518,250277.72151720105,250277.92910782312,250278.13878472993,250278.3505479198,250278.56439739116,250278.78033314238,250278.99835517176,250279.21846347774,250279.44065805856,250279.6649389125,250279.89130603796,250280.11975943315,250280.35029909632,250280.58292502578,250280.81763721968,250281.0544356763,250281.29332039377,250281.5342913703,250281.7773486041,250282.02249209327,250282.2697218359,250282.51903783024,250282.77044007427,250283.02392856608,250283.2795033038,250283.53716428543,250283.79691150913,250284.05874497275,250284.32266467437,250284.58867061202,250284.8567627836,250285.1269411872,250285.39920582058,250285.67355668178,250285.9499937687,250286.22851707914,250286.50912661117,250286.79182236252,250287.07660433103,250287.36347251455,250287.65242691094,250287.94346751797,250288.23659433343,250288.53180735506,250288.82910658064,250289.12849200785,250289.42996363452,250289.73352145823,250290.03916547674,250290.34689568775,250290.65671208885,250290.96861467778,250291.28260345198,250291.59867840924,250291.91683954705,250292.23708686308,250292.55942035478,250292.88384001976,250293.21034585556,250293.53893785964,250293.86961602955,250294.20238036267,250294.53723085666,250294.8741675088,250295.21319031657,250295.55429927743,250295.89749438874,250296.2427756479,250296.59014305228,250296.9395965992,250297.2911362861,250297.64476211014,250298.0004740688,250298.35827215924,250298.71815637883,250299.0801267248,250299.4441831943,250299.81032578473,250300.17855449318,250300.54886931682,250300.9212702529,250301.29575729865,250301.67233045108,250302.05098970735,250302.43173506466,250302.81456652004,250303.1994840706,250303.5864877134,250303.9755774454,250304.36675326386,250304.7600151656,250305.15536314767,250305.55279720714,250305.95231734094,250306.35392354598,250306.75761581922,250307.16339415766,250307.57125855808,250307.9812090175,250308.39324553276,250308.80736810068};

        ByteBuffer encodedBuffer = ByteBuffer.allocate(3000);
        varintCodec.encode(encodedBuffer, numbers, numbers.length);

        encodedBuffer.flip();
        System.out.println(encodedBuffer.remaining());
        System.out.println(Arrays.toString(varintCodec.getValueBits()));

        int size = numbers.length;
        System.out.println(size * 8);
        System.out.println("==============================");
        varintCodec.decode(encodedBuffer, Context.getBlockDoubleValues(), size);

        System.out.println(Arrays.toString(Context.getBlockDoubleValues()));
    }
}
